
WETZLER

require --> coté nodejs vient du Commons.js
pas utilisable côté front pour le nombre d'appels qui sont faites (une par require)

Import, standard ESM pour possibilité front (les modules ES6)

export default {}
ou
export const variable = 'XXX;
----------------

React reutilise des principes anciens (qui n'avaient pas les précedents: Backbone)
  Composants reutilisabble (déjà faits par Delphi, VB)
  Immutabilité

Function pures => si identifiés il vaut mieux les memoiser
  (attention la fonction ne doit pas faire des appels à l'extérieur)
  ET SURTOUT PAS MODIFIER APRES LES VALUERS RETOURNÉES PAR LE CACHE !!!

function modifier(obj, field, val) {
  console.log('modifier')
  if (obj[field] === val) {
    return obj
  }

  const clone = Object.assign({}, obj)
  clone[field] = val
  return clone
}

const _modifier = memoize(modifier)

const y = _modifier(x, 'toto', 'tata')
// y.modif = 2 casse le cache

const z = _modifier(x, 'toto', 'tata')


---------------------------------------------------
REACT est indépendant du moteur du rendu, on parle du cycle de vie
  react-dom / react-native

  <body>
    <div id="app"></div> <--- Point d'ancrage

    // ajout des scripts react
    <script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
    // ajoute moteur de rendu
    <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>

    <script src="counters.js"></script>
  </body>


VitualDOM = représentation du DOM (pas le vrai DOM)
    React compare l'arbre avant et après et identifie ce qu'il faut changer
    pour ne pas modifier que les éléments qui sont impactés. C'est ReactDOM.render
    qui fait la comparaison des arbres (qu'il génére à partir de createElement)

    !!! VOIR LA DOC DE CES FONCTIONS


ECRITURE DE COMPOSANTS VIA CLASSES
class Composant extend React.Component {
    render() {

    }
}

---> Les utiliser pour accéder au cycle de vie / avec les fonction on peut pas :(

----------------------------------------
Lorsqu'on a des éléments qui son l'un à côté de l'autre, on est pas
obligé d'utiliser une div pour les avoir, on peut utiliser React.Fragment !!!
----------------------------------------
.apply / .call (this, args...) pour appeler une fonction
----------------------------------------

Component stateful

Ils ont un state, des valeur internes à l'instance
On peut oas l'utiliser qu'avec les components en classe --> this.state
Pour faire le rendu à nouveau, on doit appeler this.setSet pour mettre
à jour le state et de provoquer l'appel à render

setState reçoit soit un object
soit une function ayant comme param l'ancien valeur du state

setState est non bloquante !!! donc parfois il faut privilegier setState en
version setState la function qui reçoit comme param le state precedent, comme
ça on peut enchainer des setState et être sûr que le state est bien modifié
da,s mes divers appels


HOOKS
-------
Permet d'utiliser les cycle du component depuis une fonction Component
--> useState
    Ordre d'appel de hooks !

    Pas de if, pas de loop autour d'un useXXX
    A utiliser règle eslint pour ça

* useState retourne [val, functionEditionDeVal]

function Counter2(props) {
  const [value, setValue] = React.useState(1)

  // on peut appeler useState plusieurs fois, on aura une fonction d'update
  // pour chaque appel qui est censé modifier le valeur du state qu'on a branché

  return React.createElement(
    'button',
    {
      onClick: () => {
        setValue(value + 1)
      }
    },
    this.state.value
  )
}

* useEffect: permet d'accéder au cycle de vie (faire un truc lorsqu'il se passe qqch
au montage et à chaque fois qu'il se met à jour)

    useEffect(() => {
        doSomethingOnMountOrUpdate()
        // Optionnaly return cleanup function
        return () => {
          doSomethingOnUnmountOrBeforeUpdate()
        }
      })

----------------------
Définitions : COMPOSANT / ELEMENT / STATE
----------------------

Default props:
    Chaque component a la prop .defaultProps pour attacher des valeurs pour les props

Children:
    Les enfant d'un component sont stockées dans les properties dans children
    Pour le parcourir React.Children.map(this.props.children, XXX)

----------------------
CYCLE

constructeur (init state)
    -> willMount
            (deprecié recemment) (le DOM n'est pas encore pret, on peut pas interagir)
            utilisé avant pour fetcher des données avant que les dom soit montée
    -> render
    -> didMount
            Le component est monté est plutôt préféré pour initialiser les données
            et il faut penser à le netoyer dans le willUnmount (annuler des requetes en
            pas resolues, timers, event listeners, etc)

lorsque les props modifiés ->
    -> willUpdate : reçoit nextPros et currentProps
            le component ba se mettre à jour
            mais on peut pas acceder à setState
            utilisé aussi comme une sorte de nettoyage avant de refaire l'update

    -> render

    -> didUpdate (prevProps, prevState, snapshot)
            on peut comparer les props et state courant (dans this)
            snapshot: return de la function getSnapshotBeforeUpdate qui remplace willReceiveProps
            le dom actualisé c'est le moment de faire des appels


    * willReceiveProps: on va recevoir des props qui viennent du parent
            aussi déprécié
            Elle ne reçoit que les props et non le state, donc pas intéressant


shouldComponentUpdate !!! -> appelé à chaque fois qu'il y a un changementde state ou props et renvoie un boolean
    si elle return false --> pas de mise à jour du state mais on passe pas par willUpdate/didUpdate
    à utiliser si jamais dans une objet state complexe il n'y a que quelques properties qui définissent qu'il
    faut l'updater
    Donc -> optiisation du rendu (car on valide les conditions de mis à jour de rendu)


lorsqu'il dispait, willUnmount

-------------------------------
TYPE

Proptypes: c'est un package à inclure. Declare un tas de validateurs du composant.

MonComponent.propTypes  --> Proptypes.oneOf, arrayOf, shape, isRequired, etc.

-------------------------------
JSX

Pour éviter les problème de createElement imbriqués lorsqu'on veut représenter un arbre c'est compliqué
On est obligé de passer par la transpilation lorsqu'on l'utilise --> env de dev pour compiler: ES6/modules/JSX/hot reload

    ESlint
    Babel       -> transpilation (se base sur des plugins, de syntaxe, de transformation)
    Webpack     -> resoud tous les fichiers (construit l'arbre de dependence) il les traite (babel, min, pretty, concat)
                   qu'on lui passe et sorte un bundle

HOY: React propose un choix des éléments pour les env de dev -> ces package et de config par défaut

_______________________________
REACT BOILERPLATE

 npm create-react-app

--------------------------------
TP decoupage
    Card

    Grille de Card
    Header
        Menu
    Popin Basket
    Liste Items
    Item

--------------------------------
Commentaires sur JSX
{/* Modal Structure */}


------------
inputs controllés

render() {
    return (
      <main>
        <div className="container">
          <div className="row">
            <div className="col s3">
              <div className="card">
                rien
                <input />
              </div>
            </div>
            <div className="col s3">
              <div className="card">
                value
                <input value="value" />
              </div>
            </div>
            <div className="col s3">
              <div className="card">
                defaultValue <input defaultValue="default value" />
              </div>
            </div>
            <div className="col s3">
              <div className="card">
                onChange <input onChange={() => {}} />
              </div>
            </div>
          </div>
        </div>
      </main>
    )
  }

  <input value="value" /> --> genere une error, parce que le value ne change jamais, malgré la mise à jour du state,
            le rendu se base sur le value passé.

REF dans le DOM
    regarder doc --> CreateRef() -> stocker la ref et l'utiliser en branchant la ref dans l'elemtn <div ref={this.myRef}>

Input en mode non controllé -> il n'a pas de onclick ni de fonctions de validations sur lui même mais c'est un bouton de
submit par exemple qui fait le control

Input controllé: <input value="value" />
    c'est le parent qui définit son value (soit en lecture seule / soit je veux prendre en compte les modifs de l'user
    et dans ce cas il faut utiliser un onChange)

    <div className="card">
        value + onChange{' '}
        <input
          value={this.state.input4}
          onChange={e => {
            console.log(e.target.value)
            this.setState({ input4: e.target.value })
          }}
        />
      </div>

---------------------------------
ROUTING

On colle le state dans le hash de lurl
partager des infos

Mode dégeu

  componentDidMount() {
    this.setState(
      JSON.parse(decodeURIComponent(document.location.hash.substring(1)))
    )
  }

  componentDidUpdate() {
    document.location.hash = JSON.stringify(this.state)
  }

Comment ?

Avec react-router-dom
 Link --> remplace A
    il faut alors déclarer un Router !
    Wrapper l'APP dans BrowserRouter --> qui est ajouté au contexte

    Switch pour se baser sur le path pour choisir la route à servir, utiliser exact
    pour match exacte (sans exact on gérer les sous routes)

    Route peut passer les infos de routing, args dans ce order -> history, location, macth

HOC = functions qui reçoivent et retournent des functions

withRouter --> on lui file un component et il retourne un autre
        reçoit automatiquement match et location, mais on a besoin
        d'un Swicth a la racine pour passer le contexte à tous les children

Avec react-router-config
    on a besoin d'un fichier de config

-------------
Flux

View -> Action -> Dispatch -> Store --> le Store a le State
  ^                            |
  <-----------------------------

View:
    User interagit avec la vue et généré des Actions

Action :
    object avec props : type / payload / meta / boolean (pour error)

Dispatch:
    sorte d'event emmiteur. Il appel un dispatch de l'action qui écoute
    et le fournit au store (il sait communiquer au store)
    Accessible au tous les composants

Store:
    Source unique de vérité. Le garant de la cohérence de données.

Redux est une sorte d'implémentation de Flux, qui fait quelques entorses
au réles de Flux (par exemple Dispatch/Store ne peuvent pas emettre des actions)

---------------
Redux (ça vient de reducer + flux -> reduce sur les actions pour donner le état du store)

ils constatent:
    Immutable c'est bien
    Si c'est immutable, une action nous dise quoi faire et son payload

    store il faut qu'il permete de faire un subscribe et de recuperer les données qui
        sont dans le store.

    dispatcher c'est une fonction à la quelle je passe ds actions.

donc l'user doit fournir une fonction de transformation qui prend une action
et qui modifie le store, mais pour que ça soit immutable, donc on lui passe
l'ancien store et on retourne un nouveau store (cloné) avec ses modifs
--> REDUCER

Prinicpe fondamentales
    Store peut change d'état mais le state du store à un moment,
    ce state n'est pas mutable

    Store source du verité

    Mutations (reduceurs) sont des fonction pures


----------
TEST --> recht-dom/test-utils (voir blog de Kent C Dodds)

Framework de base pour faire des test. Les autres lib vont se baser sur ça.

JEST utilise une lib : JSDOM pour simuler le dom (les test étant lancés sur NodeJS)

Shallow rendering: créer le component sans ses enfant ! (CHERCHER!!!)

MemoryReouter (à utiliser dans les tests pour ne pas se baser sur document.location)
Doc. Jest expect lib

Autre outil
	'react-testing-library' Lis de K. Doods

fonction rendre que retourne une api des fonctions sur les DOM crée, comme

get --> je cherche s'il est tout suite et bloquante s'il le trouve pas KO
find --> il va attendre jusqu'il apparaisse
query --> il cherche s'il trouve pas, il plante pas
fireEvent --> pour lancer des events sur les elements retournés par get 

exemple:
  const { getByText } = render(
    <MemoryRouter>
      <App />
    </MemoryRouter>,
    div
  )
  expect(getByText('Welcome to my store!')).toBeInTheDocument()

Snapshot
	toMatchSnapshot -> 1er fois: il le stocke dans un dossier snapshot (avec le tree du rendu)
	Lorsque qqn d'autre fais un changement, le snapshot est différent, donc on doit prendre la 
	décision de corriger le component ou mettre à jour le snapshot
	

ENZYME couch AirBnB
	Propose 3 renderer : 
		- mount 
		- render (génère les sous components en string) il est statique (agit pas aux events)
		- shallow (render juste le élément principal mais pas les sous enfants de 
			components inclus) : beaucoup plus proche du component (POUR DES TU !!)

-------------------------------------
Internationalisation

LIB: message format
	react-i18next

-------------------------------------
REDUX

Il faut identifier les events et les actions qui découlent de ça

reducer reçoit un state initial, une action et retourne le nouveau state
mais quelle est le state initial

	un objet qui contient une clé par reduceur

Il faut toujours cloner les states dans le reducer pour les modifier et les retourner
Utilise immutable pour avoir les Map/Set/List qu'on utilise déjà sur Java

Les liens entre react et redux se passe dans react-redux, et ce qui importe de redux est de create le Store (createStore), et pour ça il a besoin du stateInitial + reducer(s)

Store expose 
	dispatch
	getState
	replaceReducer (si on vest remplacer les reducers en plein execution (hot reload)
	subscribe (s'abonner aux modifs du store) --> prend une fonction sans params, et à
		l'utiliser pour faire le render des components pour qu'ils se mettent à jour

Le store pour ne pas l'avoir dans window, il faut le passer via un Context qui a un Provider pour
passer l'info + un Consumer pour l'utiliser

<Provider monContext>
	<Mes compoents> --> donc monContext est dispo pour tout l'arbo
</Provider>

tout ça dans react-redux, un autre package à installer -> Pour avoir le connect au context

Lorsqu'on est en mode connect()(COMPOENENT) -> les props qu'il reçoit a le state et dispatch !!! attaché par  magie)

combineReducer pour ne pas passer tout le state aux reducers mais qu'un partie
mapStateToProps: appelé à chaque fois qu'il se passe qqch dans le state.

Attention aux tests, la version connecté (avec le store) et la version non connecté du test.

---------------------
Middleware

avec CreateStore, 3ème param, le middleware

un middleware a accès à un store (pas le même store de redux mais un truc réduit, avec dispatch et getState.

({dispatch, getState}) => next => action => {ce qu'on veut faire}
	